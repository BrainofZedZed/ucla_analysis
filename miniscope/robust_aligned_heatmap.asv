%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Neural Response Alignment and Visualization Script
% 
% This script creates heatmap visualizations of neural responses across multiple 
% experimental days (D0, D1, D28), with options for different alignment and 
% sorting strategies.
%
% Input Data Requirements:
% - align_tables: Cell array of tables mapping neuron IDs between days
% - tone_neuron_mod: Cell array containing modulation classifications
% - sigs_d{0,1,28}: Cell arrays of neural activity signals
% - tone_vecs_d{0,1,28}: Binary vectors indicating tone timing
%
% Key Features:
% - Flexible alignment to either D0 (shock responses) or D28 (tone responses)
% - Optional filtering for modulated neurons only or all neurons
% - Sorting by response type (excited->suppressed) and peak response timing
% - Row-wise normalization options
% - Customizable visualization parameters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% USER OPTIONS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
normalizeEachRowFinal = false;  % If true, each row is 0-1 normalized after building all blocks
tone_length  = 897;            % forced tone length for D1 & D28
frame_buffer = 300;            % frames on each side for D1 & D28
finalWinSize = 2*frame_buffer + tone_length;
frames_per_second = 30;        % for x-axis in seconds

% New options for enhanced functionality
alignToD28 = false;           % If true, aligns to D28 tone responses instead of D0 shock
plotAllNeurons = true;       % If true, plots all neurons instead of just modulated ones
plotBothAlignments = true;   % If true, creates both D0 and D28 aligned plots

numAnimals = length(align_tables);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% MAIN ANALYSIS PIPELINE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% 1) Build aligned neuron lists based on options
if alignToD28
    [neuronList, boundary_exc_supp] = buildNeuronList(align_tables, ...
        tone_neuron_mod, 3, numAnimals, plotAllNeurons, sigs_d28);
else
    [neuronList, boundary_exc_supp] = buildNeuronList(align_tables, ...
        tone_neuron_mod, 1, numAnimals, plotAllNeurons, sigs_);
end

% 2) Prebuild peri-event responses
peri_d28_cell = cell(1,numAnimals);
peri_d1_cell  = cell(1,numAnimals);
peri_d0_cell  = cell(1,numAnimals);

for i = 1:numAnimals
    % Row-wise normalization
    s28norm = rowMinMaxNormalize(sigs_d28{i});
    s1norm  = rowMinMaxNormalize(sigs_d1{i});
    s0norm  = rowMinMaxNormalize(sigs_d0{i});
    
    % Build fixed-window responses
    [peri_d28_cell{i}, ~] = buildFixedWindowPeriToneWithOffset(...
        s28norm, tone_vecs_d28{i}, tone_length, frame_buffer, finalWinSize);
    [peri_d1_cell{i},  ~] = buildFixedWindowPeriToneWithOffset(...
        s1norm,  tone_vecs_d1{i},  tone_length, frame_buffer, finalWinSize);
    [peri_d0_cell{i},  ~] = buildFixedWindowPeriToneWithOffset(...
        s0norm,  tone_vecs_d0{i},  tone_length, frame_buffer, finalWinSize);
end

% 3) Build response blocks
[responseBlocks, neuronInfo] = buildResponseBlocks(neuronList, ...
    boundary_exc_supp, align_tables, peri_d0_cell, peri_d1_cell, ...
    peri_d28_cell, tone_neuron_mod, alignToD28);

% 4) Sort neurons
tone_start_idx = frame_buffer + 1;
tone_end_idx   = frame_buffer + tone_length;
tone_period    = tone_start_idx:tone_end_idx;

if alignToD28
    new_order = orderByPeakTimeAndType(responseBlocks.d28, ...
        1:size(responseBlocks.d28,1), tone_period, boundary_exc_supp);
else
    new_order = orderByPeakTimeAndType(responseBlocks.d0, ...
        1:size(responseBlocks.d0,1), tone_period, boundary_exc_supp);
end

% 5) Reorder all arrays
responseBlocks.d28 = responseBlocks.d28(new_order, :);
responseBlocks.d1  = responseBlocks.d1(new_order, :);
responseBlocks.d0  = responseBlocks.d0(new_order, :);

% Reorder neuron metadata
neuronInfo.rowToD1ID = neuronInfo.rowToD1ID(new_order);
neuronInfo.rowToD0ID = neuronInfo.rowToD0ID(new_order);
neuronInfo.rowToD28ID = neuronInfo.rowToD28ID(new_order);
neuronInfo.rowToAnimal = neuronInfo.rowToAnimal(new_order);
neuronInfo.d0_types = neuronInfo.d0_types(new_order);
neuronInfo.d1_types = neuronInfo.d1_types(new_order);
neuronInfo.d28_types = neuronInfo.d28_types(new_order);

% 6) Apply final normalization if requested
if normalizeEachRowFinal
    responseBlocks.d28 = rowMinMaxNormalize(responseBlocks.d28);
    responseBlocks.d1  = rowMinMaxNormalize(responseBlocks.d1);
    responseBlocks.d0  = rowMinMaxNormalize(responseBlocks.d0);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% VISUALIZATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Setup time axis
time_axis = (1:finalWinSize) / frames_per_second;
tone_time_start = (frame_buffer + 1) / frames_per_second;
tone_time_end   = (frame_buffer + tone_length) / frames_per_second;

% Create figure with appropriate size and layout
if plotBothAlignments
    figure('Position',[100,100,1800,1200]);
    subplot_rows = 2;
else
    figure('Position',[100,100,1800,600]);
    subplot_rows = 1;
end

% Plot based on alignment options
if plotBothAlignments
    % Store original alignment setting
    original_alignToD28 = alignToD28;
    
    % Create D0-aligned plots
    alignToD28 = false;
    [neuronList, boundary_exc_supp] = buildNeuronList(align_tables, ...
        tone_neuron_mod, 1, numAnimals, plotAllNeurons);
    [responseBlocks, neuronInfo] = buildResponseBlocks(neuronList, ...
        boundary_exc_supp, align_tables, peri_d0_cell, peri_d1_cell, ...
        peri_d28_cell, tone_neuron_mod, alignToD28);
    createAlignmentPlots(responseBlocks, neuronInfo, 1, 'D0', subplot_rows, ...
        time_axis, tone_time_start, tone_time_end, boundary_exc_supp);
    
    % Create D28-aligned plots
    alignToD28 = true;
    [neuronList, boundary_exc_supp] = buildNeuronList(align_tables, ...
        tone_neuron_mod, 3, numAnimals, plotAllNeurons);
    [responseBlocks, neuronInfo] = buildResponseBlocks(neuronList, ...
        boundary_exc_supp, align_tables, peri_d0_cell, peri_d1_cell, ...
        peri_d28_cell, tone_neuron_mod, alignToD28);
    createAlignmentPlots(responseBlocks, neuronInfo, 2, 'D28', subplot_rows, ...
        time_axis, tone_time_start, tone_time_end, boundary_exc_supp);
    
    % Restore original alignment setting
    alignToD28 = original_alignToD28;
else
    % Create single alignment plots based on alignToD28 option
    if alignToD28
        alignment_type = 'D28';
    else
        alignment_type = 'D0';
    end
    createAlignmentPlots(responseBlocks, neuronInfo, 1, alignment_type, subplot_rows, ...
        time_axis, tone_time_start, tone_time_end, boundary_exc_supp);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% HELPER FUNCTIONS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% HELPER FUNCTIONS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function createAlignmentPlots(responseBlocks, neuronInfo, subplot_row, alignment_type, subplot_rows, time_axis, tone_time_start, tone_time_end, boundary_exc_supp)
    % D0 subplot
    subplot(subplot_rows,3,(subplot_row-1)*3 + 1)
    imagesc(time_axis, 1:size(responseBlocks.d0,1), responseBlocks.d0)
    colormap hot
    clim([0 1])
    h1 = colorbar;
    h1.Label.String = 'Activity (normalized)';
    hold on
    
    % Add tone timing lines
    xline(tone_time_start, 'w--','LineWidth',1)
    xline(tone_time_end, 'w--','LineWidth',1)
    
    % Draw boundary between excited and suppressed
    if boundary_exc_supp > 0
        yline(boundary_exc_supp + 0.5, 'c','LineWidth',2)
    end
    
    if strcmp(alignment_type, 'D0')
        title('D0: Shock-Excited â†’ Shock-Suppressed')
    else
        title('D0 (aligned to D28)')
    end
    xlabel('Time (s)')
    ylabel('Neuron (sorted by peak time)')
    xlim([0 max(time_axis)])
    
    % Add response type labels
    for i = 1:size(responseBlocks.d0,1)
        if ~isempty(neuronInfo.d0_types{i})
            text(max(time_axis) + 0.5, i, neuronInfo.d0_types{i}, ...
                'Color', [0, 0.8, 0.8], ...
                'FontWeight', 'bold', ...
                'HorizontalAlignment', 'left', ...
                'FontSize', 8)
        end
    end
    
    % D1 subplot
    subplot(subplot_rows,3,(subplot_row-1)*3 + 2)
    imagesc(time_axis, 1:size(responseBlocks.d1,1), responseBlocks.d1)
    colormap hot
    clim([0 1])
    h2 = colorbar;
    h2.Label.String = 'Activity (normalized)';
    hold on
    
    % Add tone timing lines
    xline(tone_time_start, 'w--','LineWidth',1)
    xline(tone_time_end, 'w--','LineWidth',1)
    
    % Draw boundary between excited and suppressed
    if boundary_exc_supp > 0
        yline(boundary_exc_supp + 0.5, 'c','LineWidth',2)
    end
    
    if strcmp(alignment_type, 'D0')
        title('D1 (aligned to D0)')
    else
        title('D1 (aligned to D28)')
    end
    xlabel('Time (s)')
    xlim([0 max(time_axis)])
    
    % Add response type labels
    for i = 1:size(responseBlocks.d1,1)
        if ~isempty(neuronInfo.d1_types{i})
            text(max(time_axis) + 0.5, i, neuronInfo.d1_types{i}, ...
                'Color', [0, 0.8, 0.8], ...
                'FontWeight', 'bold', ...
                'HorizontalAlignment', 'left', ...
                'FontSize', 8)
        end
    end
    
    % D28 subplot
    subplot(subplot_rows,3,(subplot_row-1)*3 + 3)
    imagesc(time_axis, 1:size(responseBlocks.d28,1), responseBlocks.d28)
    colormap hot
    clim([0 1])
    h3 = colorbar;
    h3.Label.String = 'Activity (normalized)';
    hold on
    
    % Add tone timing lines
    xline(tone_time_start, 'w--','LineWidth',1)
    xline(tone_time_end, 'w--','LineWidth',1)
    
    % Draw boundary between excited and suppressed
    if boundary_exc_supp > 0
        yline(boundary_exc_supp + 0.5, 'c','LineWidth',2)
    end
    
    if strcmp(alignment_type, 'D0')
        title('D28 (aligned to D0)')
    else
        title('D28: Tone-Excited â†’ Tone-Suppressed')
    end
    xlabel('Time (s)')
    xlim([0 max(time_axis)])
    
    % Add response type labels
    for i = 1:size(responseBlocks.d28,1)
        if ~isempty(neuronInfo.d28_types{i})
            text(max(time_axis) + 0.5, i, neuronInfo.d28_types{i}, ...
                'Color', [0, 0.8, 0.8], ...
                'FontWeight', 'bold', ...
                'HorizontalAlignment', 'left', ...
                'FontSize', 8)
        end
    end
end

function [neuronList, boundary_exc_supp] = buildNeuronList(align_tables, tone_neuron_mod, ...
    dayIdx, animalCount, plotAllNeurons, sig)
    % buildNeuronList: Constructs list of neurons to analyze based on specified day
    % and filtering criteria
    %
    % Inputs:
    %   align_tables: Cell array of alignment tables between days
    %   tone_neuron_mod: Cell array of modulation classifications
    %   dayIdx: Index of day to align to (1=D0, 3=D28)
    %   animalCount: Number of animals
    %   plotAllNeurons: Boolean, whether to include all neurons or just modulated
    %
    % Returns:
    %   neuronList: [N x 2] array of [animalIdx, neuronID]
    %   boundary_exc_supp: Index separating excited from suppressed neurons
    
    global_exc = [];
    global_supp = [];
    
    for i = 1:animalCount
        if plotAllNeurons
            % Get all neurons for the specified day
            maxNeuronID = size(tone_neuron_mod{1,i}{1,dayIdx}{1,1}, 1);
            all_neurons = 1:maxNeuronID;

            % Different indices for D0 vs D1/D28
            if dayIdx == 1  % D0
                exc_neurons = tone_neuron_mod{1,i}{1,dayIdx}{1,3};  % excited
                supp_neurons = tone_neuron_mod{1,i}{1,dayIdx}{1,4}; % suppressed
            else  % D1 or D28
                exc_neurons = tone_neuron_mod{1,i}{1,dayIdx}{1,1};  % excited
                supp_neurons = tone_neuron_mod{1,i}{1,dayIdx}{1,2}; % suppressed
            end            
            % Categorize remaining neurons as non-responsive
            other_neurons = setdiff(all_neurons, [exc_neurons; supp_neurons]);
            
            % Add all neurons to lists
            global_exc = [global_exc; [repmat(i,numel(exc_neurons),1), exc_neurons(:)]];
            global_supp = [global_supp; [repmat(i,numel(supp_neurons),1), supp_neurons(:)]];
            global_other = [repmat(i,numel(other_neurons),1), other_neurons(:)];
            
            % Combine all categories
            neuronList = [global_exc; global_supp; global_other];
            boundary_exc_supp = size(global_exc,1);
            
        else
            % Get only modulated neurons
            exc_neurons = tone_neuron_mod{1,i}{1,dayIdx}{1,1};  % excited
            supp_neurons = tone_neuron_mod{1,i}{1,dayIdx}{1,2}; % suppressed
            
            % Add to global lists
            global_exc = [global_exc; [repmat(i,numel(exc_neurons),1), exc_neurons(:)]];
            global_supp = [global_supp; [repmat(i,numel(supp_neurons),1), supp_neurons(:)]];
            
            % Combine excited and suppressed lists
            neuronList = [global_exc; global_supp];
            boundary_exc_supp = size(global_exc,1);
        end
    end
end

function [responseBlocks, neuronInfo] = buildResponseBlocks(neuronList, boundary_exc_supp, ...
    align_tables, peri_d0_cell, peri_d1_cell, peri_d28_cell, tone_neuron_mod, alignToD28)
    % buildResponseBlocks: Constructs response matrices for each day based on 
    % neuron list and alignment information
    %
    % Inputs:
    %   neuronList: [N x 2] array of [animalIdx, neuronID]
    %   boundary_exc_supp: Index separating excited from suppressed neurons
    %   align_tables: Cell array of alignment tables
    %   peri_d{0,1,28}_cell: Cell arrays of peri-event responses
    %   tone_neuron_mod: Cell array of modulation classifications
    %   alignToD28: Boolean, whether to align to D28 instead of D0
    %
    % Returns:
    %   responseBlocks: Struct containing response matrices for each day
    %   neuronInfo: Struct containing neuron metadata and classifications
    
    nRows = size(neuronList,1);
    finalWinSize = size(peri_d0_cell{1},2);
    
    % Initialize response blocks
    block_d28 = zeros(nRows, finalWinSize);
    block_d1  = zeros(nRows, finalWinSize);
    block_d0  = zeros(nRows, finalWinSize);
    
    % Initialize tracking arrays
    rowToD1ID = zeros(nRows,1);
    rowToD0ID = zeros(nRows,1);
    rowToD28ID = zeros(nRows,1);
    rowToAnimal = zeros(nRows,1);
    
    % Store response types
    d0_types = cell(nRows,1);
    d1_types = cell(nRows,1);
    d28_types = cell(nRows,1);
    
    for rowIdx = 1:nRows
        animalIdx = neuronList(rowIdx,1);
        if alignToD28
            d28id = neuronList(rowIdx,2);
        else
            d0id = neuronList(rowIdx,2);
        end
        
        AlignT = align_tables{animalIdx};
        
        if alignToD28
            % D28 alignment logic
            rA = find(AlignT.D28 == d28id, 1, 'first');
            if ~isempty(rA)
                d0id = AlignT.D0(rA);
                d1id = AlignT.D1(rA);
                
                % Add D28 data
                if d28id>0 && d28id<=size(peri_d28_cell{animalIdx},1)
                    block_d28(rowIdx,:) = peri_d28_cell{animalIdx}(d28id,:);
                    rowToD28ID(rowIdx) = d28id;
                    
                    % Determine D28 response type
                    if rowIdx <= boundary_exc_supp
                        d28_types{rowIdx} = 'E';
                    else
                        d28_types{rowIdx} = 'S';
                    end
                end
                
                % Add aligned D0 and D1 data
                if ~isnan(d0id) && d0id>0 && d0id<=size(peri_d0_cell{animalIdx},1)
                    block_d0(rowIdx,:) = peri_d0_cell{animalIdx}(d0id,:);
                    rowToD0ID(rowIdx) = d0id;
                end
                if ~isnan(d1id) && d1id>0 && d1id<=size(peri_d1_cell{animalIdx},1)
                    block_d1(rowIdx,:) = peri_d1_cell{animalIdx}(d1id,:);
                    rowToD1ID(rowIdx) = d1id;
                end
            end
        else
            % D0 alignment logic
            if d0id>0 && d0id<=size(peri_d0_cell{animalIdx},1)
                block_d0(rowIdx,:) = peri_d0_cell{animalIdx}(d0id,:);
                rowToD0ID(rowIdx) = d0id;
                
                % Determine D0 response type
                if rowIdx <= boundary_exc_supp
                    d0_types{rowIdx} = 'ShE';
                else
                    d0_types{rowIdx} = 'ShS';
                end
            end
            
            % Look up matched D1 & D28
            rA = find(AlignT.D0 == d0id, 1, 'first');
            if ~isempty(rA)
                d1id = AlignT.D1(rA);
                d28id = AlignT.D28(rA);
                
                % Add D1 and D28 data
                if ~isnan(d1id) && d1id>0 && d1id<=size(peri_d1_cell{animalIdx},1)
                    block_d1(rowIdx,:) = peri_d1_cell{animalIdx}(d1id,:);
                    rowToD1ID(rowIdx) = d1id;
                    
                    % Check if D1 neuron was excited or suppressed
                    tone_exc_d1 = tone_neuron_mod{animalIdx}{2}{1};
                    tone_supp_d1 = tone_neuron_mod{animalIdx}{2}{2};
                    if ismember(d1id, tone_exc_d1)
                        d1_types{rowIdx} = 'E';
                    elseif ismember(d1id, tone_supp_d1)
                        d1_types{rowIdx} = 'S';
                    else
                        d1_types{rowIdx} = '-';
                    end
                end
                
                if ~isnan(d28id) && d28id>0 && d28id<=size(peri_d28_cell{animalIdx},1)
                    block_d28(rowIdx,:) = peri_d28_cell{animalIdx}(d28id,:);
                    rowToD28ID(rowIdx) = d28id;
                    
                    % Check if D28 neuron was excited or suppressed
                    tone_exc_d28 = tone_neuron_mod{animalIdx}{3}{1};
                    tone_supp_d28 = tone_neuron_mod{animalIdx}{3}{2};
                    if ismember(d28id, tone_exc_d28)
                        d28_types{rowIdx} = 'E';
                    elseif ismember(d28id, tone_supp_d28)
                        d28_types{rowIdx} = 'S';
                    else
                        d28_types{rowIdx} = '-';
                    end
                end
            end
        end
        
        rowToAnimal(rowIdx) = animalIdx;
    end
    
    % Package outputs
    responseBlocks = struct('d0', block_d0, 'd1', block_d1, 'd28', block_d28);
    neuronInfo = struct('rowToD0ID', rowToD0ID, 'rowToD1ID', rowToD1ID, ...
        'rowToD28ID', rowToD28ID, 'rowToAnimal', rowToAnimal, ...
        'd0_types', {d0_types}, 'd1_types', {d1_types}, ...
        'd28_types', {d28_types});
end

function sorted_indices = orderByPeakTimeAndType(dataMat, rowIndices, tone_period, boundary_exc_supp)
    % orderByPeakTimeAndType: Reorders neurons first by type (excited/suppressed/other)
    % then by peak response time within the tone period
    %
    % Inputs:
    %   dataMat: Response matrix [neurons x time]
    %   rowIndices: Indices to sort
    %   tone_period: Time indices corresponding to tone presentation
    %   boundary_exc_supp: Index separating excited from suppressed neurons
    %
    % Returns:
    %   sorted_indices: Reordered row indices
    
    if isempty(rowIndices)
        sorted_indices = [];
        return;
    end
    
    % Split indices by type
    exc_indices = rowIndices(rowIndices <= boundary_exc_supp);
    supp_indices = rowIndices(rowIndices > boundary_exc_supp);
    
    % Sort each group by peak time
    exc_sorted = orderByPeakTime(dataMat, exc_indices, tone_period);
    supp_sorted = orderByPeakTime(dataMat, supp_indices, tone_period);
    
    % Combine sorted groups
    sorted_indices = [exc_sorted(:); supp_sorted(:)];
end

function sorted_indices = orderByPeakTime(dataMat, rowIndices, tone_period)
    % orderByPeakTime: Reorders rows based on timing of peak response
    %
    % Inputs:
    %   dataMat: Response matrix [neurons x time]
    %   rowIndices: Indices of rows to sort
    %   tone_period: Time indices corresponding to tone presentation
    %
    % Returns:
    %   sorted_indices: Reordered row indices
    
    if isempty(rowIndices)
        sorted_indices = [];
        return;
    end
    
    peak_times = zeros(length(rowIndices),1);
    for i = 1:length(rowIndices)
        rr = rowIndices(i);
        rowData = dataMat(rr, tone_period);
        [~, maxLoc] = max(rowData);
        peak_times(i) = maxLoc;
    end
    [~, sort_idx] = sort(peak_times, 'ascend');
    sorted_indices = rowIndices(sort_idx);
end

function normMat = rowMinMaxNormalize(rawMat)
    % rowMinMaxNormalize: Performs row-wise min-max normalization
    %   Each row is independently scaled to range from 0 to 1
    %
    % Inputs:
    %   rawMat: Input matrix to normalize [N x T]
    %
    % Returns:
    %   normMat: Normalized matrix [N x T]
    
    normMat = zeros(size(rawMat));
    for rr = 1:size(rawMat,1)
        mn = min(rawMat(rr,:));
        mx = max(rawMat(rr,:));
        if mx > mn
            normMat(rr,:) = (rawMat(rr,:) - mn) / (mx - mn);
        end
    end
end

function [periResp, offsetIndex] = buildFixedWindowPeriToneWithOffset(sigMat, toneVec, forcedToneDur, frameBuf, finalWinSize)
    % Build peri-stimulus time windows around each tone presentation
    % Inputs:
    %   sigMat: Matrix of neural signals [neurons x time]
    %   toneVec: Binary vector indicating tone timing
    %   forcedToneDur: Fixed duration to use for all tones
    %   frameBuf: Number of frames to include before/after tone
    %   finalWinSize: Total size of the window
    
    toneOn  = find(diff([0 toneVec]) == 1);
    toneOff = find(diff([toneVec 0]) == -1);
    nTones  = min(length(toneOn), length(toneOff));
    toneOn  = toneOn(1:nTones);
    toneOff = toneOff(1:nTones);
    
    [numNeurons, ~] = size(sigMat);
    periResp = zeros(numNeurons, finalWinSize);
    
    if nTones == 0
        offsetIndex = frameBuf+1;
        return;
    end
    
    dayDur     = mean(toneOff - toneOn + 1);
    offsetIndex= floor(frameBuf + dayDur);
    
    for nn = 1:numNeurons
        allTrials = [];
        for t = 1:nTones
            tOn  = toneOn(t) - frameBuf;
            tOff = toneOn(t) + forcedToneDur - 1 + frameBuf;
            if tOn<1 || tOff>size(sigMat,2), continue; end
            snippet = sigMat(nn, tOn:tOff);
            L = length(snippet);
            if L<finalWinSize
                padded = zeros(1, finalWinSize);
                padded(1:L) = snippet;
                allTrials = [allTrials; padded];
            elseif L>finalWinSize
                allTrials = [allTrials; snippet(1:finalWinSize)];
            else
                allTrials = [allTrials; snippet];
            end
        end
        if ~isempty(allTrials)
            periResp(nn,:) = mean(allTrials,1);
        end
    end
end